// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/proto/user.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserSrv service

func NewUserSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserSrv service

type UserSrvService interface {
	GetuserById(ctx context.Context, in *SearchId, opts ...client.CallOption) (*User, error)
	Getusers(ctx context.Context, in *SearchParams, opts ...client.CallOption) (*Users, error)
	Createuser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	Updateuser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	Deleteuser(ctx context.Context, in *SearchId, opts ...client.CallOption) (*AffectedCount, error)
	BeforeCreateuser(ctx context.Context, in *User, opts ...client.CallOption) (*ValidationErr, error)
	BeforeUpdateuser(ctx context.Context, in *User, opts ...client.CallOption) (*ValidationErr, error)
	BeforeDeleteuser(ctx context.Context, in *User, opts ...client.CallOption) (*ValidationErr, error)
	AfterCreateuser(ctx context.Context, in *User, opts ...client.CallOption) (*AfterFuncErr, error)
	AfterUpdateuser(ctx context.Context, in *User, opts ...client.CallOption) (*AfterFuncErr, error)
	AfterDeleteuser(ctx context.Context, in *User, opts ...client.CallOption) (*AfterFuncErr, error)
}

type userSrvService struct {
	c    client.Client
	name string
}

func NewUserSrvService(name string, c client.Client) UserSrvService {
	return &userSrvService{
		c:    c,
		name: name,
	}
}

func (c *userSrvService) GetuserById(ctx context.Context, in *SearchId, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserSrv.GetuserById", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) Getusers(ctx context.Context, in *SearchParams, opts ...client.CallOption) (*Users, error) {
	req := c.c.NewRequest(c.name, "UserSrv.Getusers", in)
	out := new(Users)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) Createuser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserSrv.Createuser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) Updateuser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserSrv.Updateuser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) Deleteuser(ctx context.Context, in *SearchId, opts ...client.CallOption) (*AffectedCount, error) {
	req := c.c.NewRequest(c.name, "UserSrv.Deleteuser", in)
	out := new(AffectedCount)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) BeforeCreateuser(ctx context.Context, in *User, opts ...client.CallOption) (*ValidationErr, error) {
	req := c.c.NewRequest(c.name, "UserSrv.BeforeCreateuser", in)
	out := new(ValidationErr)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) BeforeUpdateuser(ctx context.Context, in *User, opts ...client.CallOption) (*ValidationErr, error) {
	req := c.c.NewRequest(c.name, "UserSrv.BeforeUpdateuser", in)
	out := new(ValidationErr)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) BeforeDeleteuser(ctx context.Context, in *User, opts ...client.CallOption) (*ValidationErr, error) {
	req := c.c.NewRequest(c.name, "UserSrv.BeforeDeleteuser", in)
	out := new(ValidationErr)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) AfterCreateuser(ctx context.Context, in *User, opts ...client.CallOption) (*AfterFuncErr, error) {
	req := c.c.NewRequest(c.name, "UserSrv.AfterCreateuser", in)
	out := new(AfterFuncErr)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) AfterUpdateuser(ctx context.Context, in *User, opts ...client.CallOption) (*AfterFuncErr, error) {
	req := c.c.NewRequest(c.name, "UserSrv.AfterUpdateuser", in)
	out := new(AfterFuncErr)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvService) AfterDeleteuser(ctx context.Context, in *User, opts ...client.CallOption) (*AfterFuncErr, error) {
	req := c.c.NewRequest(c.name, "UserSrv.AfterDeleteuser", in)
	out := new(AfterFuncErr)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserSrv service

type UserSrvHandler interface {
	GetuserById(context.Context, *SearchId, *User) error
	Getusers(context.Context, *SearchParams, *Users) error
	Createuser(context.Context, *User, *User) error
	Updateuser(context.Context, *User, *User) error
	Deleteuser(context.Context, *SearchId, *AffectedCount) error
	BeforeCreateuser(context.Context, *User, *ValidationErr) error
	BeforeUpdateuser(context.Context, *User, *ValidationErr) error
	BeforeDeleteuser(context.Context, *User, *ValidationErr) error
	AfterCreateuser(context.Context, *User, *AfterFuncErr) error
	AfterUpdateuser(context.Context, *User, *AfterFuncErr) error
	AfterDeleteuser(context.Context, *User, *AfterFuncErr) error
}

func RegisterUserSrvHandler(s server.Server, hdlr UserSrvHandler, opts ...server.HandlerOption) error {
	type userSrv interface {
		GetuserById(ctx context.Context, in *SearchId, out *User) error
		Getusers(ctx context.Context, in *SearchParams, out *Users) error
		Createuser(ctx context.Context, in *User, out *User) error
		Updateuser(ctx context.Context, in *User, out *User) error
		Deleteuser(ctx context.Context, in *SearchId, out *AffectedCount) error
		BeforeCreateuser(ctx context.Context, in *User, out *ValidationErr) error
		BeforeUpdateuser(ctx context.Context, in *User, out *ValidationErr) error
		BeforeDeleteuser(ctx context.Context, in *User, out *ValidationErr) error
		AfterCreateuser(ctx context.Context, in *User, out *AfterFuncErr) error
		AfterUpdateuser(ctx context.Context, in *User, out *AfterFuncErr) error
		AfterDeleteuser(ctx context.Context, in *User, out *AfterFuncErr) error
	}
	type UserSrv struct {
		userSrv
	}
	h := &userSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&UserSrv{h}, opts...))
}

type userSrvHandler struct {
	UserSrvHandler
}

func (h *userSrvHandler) GetuserById(ctx context.Context, in *SearchId, out *User) error {
	return h.UserSrvHandler.GetuserById(ctx, in, out)
}

func (h *userSrvHandler) Getusers(ctx context.Context, in *SearchParams, out *Users) error {
	return h.UserSrvHandler.Getusers(ctx, in, out)
}

func (h *userSrvHandler) Createuser(ctx context.Context, in *User, out *User) error {
	return h.UserSrvHandler.Createuser(ctx, in, out)
}

func (h *userSrvHandler) Updateuser(ctx context.Context, in *User, out *User) error {
	return h.UserSrvHandler.Updateuser(ctx, in, out)
}

func (h *userSrvHandler) Deleteuser(ctx context.Context, in *SearchId, out *AffectedCount) error {
	return h.UserSrvHandler.Deleteuser(ctx, in, out)
}

func (h *userSrvHandler) BeforeCreateuser(ctx context.Context, in *User, out *ValidationErr) error {
	return h.UserSrvHandler.BeforeCreateuser(ctx, in, out)
}

func (h *userSrvHandler) BeforeUpdateuser(ctx context.Context, in *User, out *ValidationErr) error {
	return h.UserSrvHandler.BeforeUpdateuser(ctx, in, out)
}

func (h *userSrvHandler) BeforeDeleteuser(ctx context.Context, in *User, out *ValidationErr) error {
	return h.UserSrvHandler.BeforeDeleteuser(ctx, in, out)
}

func (h *userSrvHandler) AfterCreateuser(ctx context.Context, in *User, out *AfterFuncErr) error {
	return h.UserSrvHandler.AfterCreateuser(ctx, in, out)
}

func (h *userSrvHandler) AfterUpdateuser(ctx context.Context, in *User, out *AfterFuncErr) error {
	return h.UserSrvHandler.AfterUpdateuser(ctx, in, out)
}

func (h *userSrvHandler) AfterDeleteuser(ctx context.Context, in *User, out *AfterFuncErr) error {
	return h.UserSrvHandler.AfterDeleteuser(ctx, in, out)
}
